{"ast":null,"code":"// src/utils/imageUtils.js\n\n/**\n * Utilidades para construir URLs de imágenes de forma robusta en dev/prod.\n * - Mantiene http(s):// y data: tal cual\n * - Normaliza rutas relativas\n * - /uploads en dev -> usa backend local (http://localhost:4000)\n * - En prod, asume que Nginx sirve /uploads en el mismo dominio (configurable)\n */\n\nconst STRIP_TRAILING_SLASH = (s = \"\") => s.replace(/\\/+$/, \"\");\n_c = STRIP_TRAILING_SLASH;\nconst isAbsoluteUrl = u => /^https?:\\/\\//i.test(u);\nconst isDataUrl = u => typeof u === \"string\" && u.startsWith(\"data:\");\nconst getEnv = k => {\n  try {\n    var _process$env$k, _process$env;\n    return ((_process$env$k = (_process$env = process.env) === null || _process$env === void 0 ? void 0 : _process$env[k]) !== null && _process$env$k !== void 0 ? _process$env$k : \"\").trim();\n  } catch {\n    return \"\";\n  }\n};\nconst guessIsLocalhost = () => {\n  if (typeof window === \"undefined\") return false;\n  const h = window.location.hostname || \"\";\n  return h === \"localhost\" || h === \"127.0.0.1\" || h === \"::1\";\n};\n\n/**\n * Obtiene un ORIGEN (scheme+host+port) válido para alcanzar el backend.\n * Prioridad:\n * 1) REACT_APP_BACKEND_ORIGIN (si está definida)\n * 2) REACT_APP_UPLOADS_BASE (si está definida)\n * 3) REACT_APP_API_BASE / REACT_APP_BACKEND_URL si son ABSOLUTAS (toma .origin)\n * 4) Si estamos en localhost -> http://localhost:4000\n * 5) En otro caso -> window.location.origin (asumiendo Nginx sirve /uploads)\n */\nexport const getBackendOrigin = () => {\n  const explicitOrigin = getEnv(\"REACT_APP_BACKEND_ORIGIN\");\n  if (explicitOrigin) return STRIP_TRAILING_SLASH(explicitOrigin);\n  const uploadsBase = getEnv(\"REACT_APP_UPLOADS_BASE\");\n  if (uploadsBase) return STRIP_TRAILING_SLASH(uploadsBase);\n  const apiBase = getEnv(\"REACT_APP_API_BASE\") || getEnv(\"REACT_APP_BACKEND_URL\") || \"/api\";\n  if (isAbsoluteUrl(apiBase)) {\n    try {\n      return new URL(apiBase).origin;\n    } catch {\n      // ignore\n    }\n  }\n  if (guessIsLocalhost()) {\n    return \"http://localhost:4000\";\n  }\n  if (typeof window !== \"undefined\") {\n    return window.location.origin;\n  }\n\n  // Fallback seguro\n  return \"\";\n};\n\n/**\n * Devuelve la URL correcta de imagen.\n * @param {string} imagePath - Ruta de imagen desde la BD.\n * @returns {string} - URL completa o placeholder.\n */\nexport const getImageUrl = imagePath => {\n  if (!imagePath) return \"/placeholder.png\"; // fallback\n\n  // Absolutas o data:\n  if (isAbsoluteUrl(imagePath) || isDataUrl(imagePath)) return imagePath;\n\n  // Asegura slash inicial\n  const relativePath = imagePath.startsWith(\"/\") ? imagePath : `/${imagePath}`;\n\n  // Caso especial: /uploads\n  if (relativePath.startsWith(\"/uploads\")) {\n    const origin = getBackendOrigin();\n    // En dev: origin típico http://localhost:4000\n    // En prod: si Nginx sirve /uploads, bastaría retornar relativePath\n    return origin ? `${STRIP_TRAILING_SLASH(origin)}${relativePath}` : relativePath;\n  }\n\n  // Para otras rutas relativas, deja relativo (sirve desde el mismo dominio)\n  return relativePath;\n};\nexport default getImageUrl;\nvar _c;\n$RefreshReg$(_c, \"STRIP_TRAILING_SLASH\");","map":{"version":3,"names":["STRIP_TRAILING_SLASH","s","replace","_c","isAbsoluteUrl","u","test","isDataUrl","startsWith","getEnv","k","_process$env$k","_process$env","process","env","trim","guessIsLocalhost","window","h","location","hostname","getBackendOrigin","explicitOrigin","uploadsBase","apiBase","URL","origin","getImageUrl","imagePath","relativePath","$RefreshReg$"],"sources":["/Users/reyvipo/Documents/GitHub/titilab/frontend/src/utils/imageUtils.js"],"sourcesContent":["// src/utils/imageUtils.js\n\n/**\n * Utilidades para construir URLs de imágenes de forma robusta en dev/prod.\n * - Mantiene http(s):// y data: tal cual\n * - Normaliza rutas relativas\n * - /uploads en dev -> usa backend local (http://localhost:4000)\n * - En prod, asume que Nginx sirve /uploads en el mismo dominio (configurable)\n */\n\nconst STRIP_TRAILING_SLASH = (s = \"\") => s.replace(/\\/+$/, \"\");\n\nconst isAbsoluteUrl = (u) => /^https?:\\/\\//i.test(u);\nconst isDataUrl = (u) => typeof u === \"string\" && u.startsWith(\"data:\");\n\nconst getEnv = (k) => {\n  try {\n    return (process.env?.[k] ?? \"\").trim();\n  } catch {\n    return \"\";\n  }\n};\n\nconst guessIsLocalhost = () => {\n  if (typeof window === \"undefined\") return false;\n  const h = window.location.hostname || \"\";\n  return (\n    h === \"localhost\" ||\n    h === \"127.0.0.1\" ||\n    h === \"::1\"\n  );\n};\n\n/**\n * Obtiene un ORIGEN (scheme+host+port) válido para alcanzar el backend.\n * Prioridad:\n * 1) REACT_APP_BACKEND_ORIGIN (si está definida)\n * 2) REACT_APP_UPLOADS_BASE (si está definida)\n * 3) REACT_APP_API_BASE / REACT_APP_BACKEND_URL si son ABSOLUTAS (toma .origin)\n * 4) Si estamos en localhost -> http://localhost:4000\n * 5) En otro caso -> window.location.origin (asumiendo Nginx sirve /uploads)\n */\nexport const getBackendOrigin = () => {\n  const explicitOrigin = getEnv(\"REACT_APP_BACKEND_ORIGIN\");\n  if (explicitOrigin) return STRIP_TRAILING_SLASH(explicitOrigin);\n\n  const uploadsBase = getEnv(\"REACT_APP_UPLOADS_BASE\");\n  if (uploadsBase) return STRIP_TRAILING_SLASH(uploadsBase);\n\n  const apiBase =\n    getEnv(\"REACT_APP_API_BASE\") || getEnv(\"REACT_APP_BACKEND_URL\") || \"/api\";\n\n  if (isAbsoluteUrl(apiBase)) {\n    try {\n      return new URL(apiBase).origin;\n    } catch {\n      // ignore\n    }\n  }\n\n  if (guessIsLocalhost()) {\n    return \"http://localhost:4000\";\n  }\n\n  if (typeof window !== \"undefined\") {\n    return window.location.origin;\n  }\n\n  // Fallback seguro\n  return \"\";\n};\n\n/**\n * Devuelve la URL correcta de imagen.\n * @param {string} imagePath - Ruta de imagen desde la BD.\n * @returns {string} - URL completa o placeholder.\n */\nexport const getImageUrl = (imagePath) => {\n  if (!imagePath) return \"/placeholder.png\"; // fallback\n\n  // Absolutas o data:\n  if (isAbsoluteUrl(imagePath) || isDataUrl(imagePath)) return imagePath;\n\n  // Asegura slash inicial\n  const relativePath = imagePath.startsWith(\"/\") ? imagePath : `/${imagePath}`;\n\n  // Caso especial: /uploads\n  if (relativePath.startsWith(\"/uploads\")) {\n    const origin = getBackendOrigin();\n    // En dev: origin típico http://localhost:4000\n    // En prod: si Nginx sirve /uploads, bastaría retornar relativePath\n    return origin ? `${STRIP_TRAILING_SLASH(origin)}${relativePath}` : relativePath;\n  }\n\n  // Para otras rutas relativas, deja relativo (sirve desde el mismo dominio)\n  return relativePath;\n};\n\nexport default getImageUrl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}