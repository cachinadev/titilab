{"ast":null,"code":"var _jsxFileName = \"/Users/reyvipo/Documents/GitHub/titilab/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$();\n// src/context/CartContext.js\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState(() => {\n    try {\n      const storedCart = localStorage.getItem(\"cart\");\n      return storedCart ? JSON.parse(storedCart) : [];\n    } catch {\n      return [];\n    }\n  });\n\n  // ðŸ“Œ Guardar carrito en localStorage cada vez que cambie\n  useEffect(() => {\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }, [cart]);\n\n  // ðŸ“Œ Normalizar imagen â†’ siempre devolver /uploads/... si existe\n  const normalizeImagePath = image => {\n    if (!image) return \"\";\n    const match = image.match(/(\\/uploads\\/.*)$/);\n    return match ? match[1] : image;\n  };\n\n  // ðŸ“Œ AÃ±adir producto â€” si existe, aumentar cantidad\n  const addToCart = product => {\n    setCart(prevCart => {\n      const existingItem = prevCart.find(item => item._id === product._id);\n      if (existingItem) {\n        return prevCart.map(item => item._id === product._id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      }\n      return [...prevCart, {\n        ...product,\n        image: normalizeImagePath(product.image),\n        quantity: 1,\n        cartId: Date.now() + Math.random()\n      }];\n    });\n  };\n\n  // ðŸ“Œ Eliminar producto por cartId\n  const removeFromCart = cartId => {\n    setCart(prevCart => prevCart.filter(item => item.cartId !== cartId));\n  };\n\n  // ðŸ“Œ Actualizar cantidad\n  const updateQuantity = (cartId, newQuantity) => {\n    setCart(prevCart => prevCart.map(item => item.cartId === cartId ? {\n      ...item,\n      quantity: Math.max(1, newQuantity)\n    } : item));\n  };\n\n  // ðŸ“Œ Vaciar carrito\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // ðŸ“Œ Obtener total de items\n  const getTotalItems = () => cart.reduce((acc, item) => acc + item.quantity, 0);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      setCart,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      getTotalItems\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"RbQ5pXZvXC1QfkV7CJBvI7pZIss=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","normalizeImagePath","image","match","addToCart","product","prevCart","existingItem","find","item","_id","map","quantity","cartId","Date","now","Math","random","removeFromCart","filter","updateQuantity","newQuantity","max","clearCart","getTotalItems","reduce","acc","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/reyvipo/Documents/GitHub/titilab/frontend/src/context/CartContext.js"],"sourcesContent":["// src/context/CartContext.js\nimport React, { createContext, useState, useEffect } from \"react\";\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState(() => {\n    try {\n      const storedCart = localStorage.getItem(\"cart\");\n      return storedCart ? JSON.parse(storedCart) : [];\n    } catch {\n      return [];\n    }\n  });\n\n  // ðŸ“Œ Guardar carrito en localStorage cada vez que cambie\n  useEffect(() => {\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }, [cart]);\n\n  // ðŸ“Œ Normalizar imagen â†’ siempre devolver /uploads/... si existe\n  const normalizeImagePath = (image) => {\n    if (!image) return \"\";\n    const match = image.match(/(\\/uploads\\/.*)$/);\n    return match ? match[1] : image;\n  };\n\n  // ðŸ“Œ AÃ±adir producto â€” si existe, aumentar cantidad\n  const addToCart = (product) => {\n    setCart((prevCart) => {\n      const existingItem = prevCart.find((item) => item._id === product._id);\n\n      if (existingItem) {\n        return prevCart.map((item) =>\n          item._id === product._id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n      }\n\n      return [\n        ...prevCart,\n        {\n          ...product,\n          image: normalizeImagePath(product.image),\n          quantity: 1,\n          cartId: Date.now() + Math.random()\n        }\n      ];\n    });\n  };\n\n  // ðŸ“Œ Eliminar producto por cartId\n  const removeFromCart = (cartId) => {\n    setCart((prevCart) => prevCart.filter((item) => item.cartId !== cartId));\n  };\n\n  // ðŸ“Œ Actualizar cantidad\n  const updateQuantity = (cartId, newQuantity) => {\n    setCart((prevCart) =>\n      prevCart.map((item) =>\n        item.cartId === cartId\n          ? { ...item, quantity: Math.max(1, newQuantity) }\n          : item\n      )\n    );\n  };\n\n  // ðŸ“Œ Vaciar carrito\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // ðŸ“Œ Obtener total de items\n  const getTotalItems = () =>\n    cart.reduce((acc, item) => acc + item.quantity, 0);\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        setCart,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n        clearCart,\n        getTotalItems\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}